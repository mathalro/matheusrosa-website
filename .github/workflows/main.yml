name: Continuous Integration and Delivery

on:
  push:
    branches: [main]

env:
  WEBSITE_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/website
  API_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/api
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build the Docker Image
    runs-on: ubuntu-latest


    steps:
      - id: pre-step
        shell: bash
        run: echo "release-version=$(echo ${GITHUB_REF:10})" >> $GITHUB_OUTPUT
        
      - name: checkout main
        uses: actions/checkout@v3

      - name: Set environment variables to .env
        run: |
          echo "WEBSITE_IMAGE=$(echo ${{env.WEBSITE_IMAGE}} )" >> $GITHUB_ENV
          echo "API_IMAGE=$(echo ${{env.API_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV

      - name: Log in to GitHub Packages
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

      - name: Pull images
        run: |
          docker pull ${{ env.WEBSITE_IMAGE }} || true
          docker pull ${{ env.API_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true

      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml build

      - name: Push images
        run: |
          docker push ${{ env.WEBSITE_IMAGE }}
          docker push ${{ env.API_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}

  checking-secrets:
    name: Checking secrets
    runs-on: ubuntu-latest
    needs: build
    outputs:
      secret_key_exists: ${{steps.check_secrets.outputs.defined}}
    steps:
      - name: Check for Secrets availabilities
        id: check_secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.AWS_EC2_IP_ADDRESS }}" && -n "${{ secrets.AWS_HOST_USER }}" ]]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: checking-secrets
    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE }}
          aws-region: ${{ vars.AWS_TARGET_REGION }}
          role-session-name: "GitHubActions-DeployWebserver"

      - name: Refresn ASG Instances
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name WebserverStack-autoscalinggroupASGA966C106-BUpPL4DaLuva